plugins {
	id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
}

mixin {
    add sourceSets.main, modId+".refmap.json"
}

archivesBaseName = project.modFilename
version = project.mod_version
group = project.maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + modFilename + ', Mod Version: ' + mod_version + ', Minecraft Version: ' + modMinecraftVersion + ', Forge Version: ' + modForgeVersion)
minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			arg "-mixin.config="+modId+".mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                modId {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			arg "-mixin.config="+modId+".mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modId {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {  url = "https://repo.spongepowered.org/maven" } // mixin
	maven {url "https://www.cursemaven.com"}
    maven {url "https://maven.shedaniel.me/"} // cloth config
}

dependencies {
	minecraft 'net.minecraftforge:forge:' + modMinecraftVersion + '-' + modForgeVersion
	annotationProcessor "org.spongepowered:mixin:"+modMixinVersion+":processor"
	implementation "org.spongepowered:mixin:"+modMixinVersion+""
	implementation fileTree(include: ['*.jar'], dir: 'libs')
	implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:"+clothConfigVersion)

}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

//task sourcesJar(type: Jar, dependsOn: classes) {
//	classifier = "sources"
//	from sourceSets.main.allSource
//}

jar {
	from "LICENSE"
    manifest {
        attributes([
            // Existing properties here
            "MixinConfigs": modId+".mixins.json"
        ])
    }
}

curseforge {
    project {
    	id = modCurseId
		apiKey = "$System.env.CURSEFORGEKEY"
		changelog = file('changelog.md')
		releaseType = 'release'
		addGameVersion(modMinecraftVersion)
        addGameVersion("Forge")
        relations {
      		requiredDependency 'cloth-config'
		}	
		mainArtifact(jar) {
			displayName = modFilename+"-$project.version"
		}
	}		
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: project.modMinecraftVersion,
            modForgeVersion: project.modForgeVersion, mod_version: project.mod_version,
            clothConfigVersion: project.clothConfigVersion,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties/* + [project: project]*/
    }
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}
